# my_subscriptions
from aiogram import Router, F
from app.states.subscription import Step
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from app.services.db import user_service, key_service
from app.helpers.failure_handler import failure_handler
from app.keyboards.inline import empty_keyboard

router = Router()

# @router.message(F.text == "/help")
@router.callback_query(F.data == "my_subscriptions", Step.show_menu)
async def help(callback: CallbackQuery, state: FSMContext):
    # –û—Ç–ø—Ä–∞–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
    await callback.message.delete()
    
    keys = await key_service.get_active_keys_for_tg_id(callback.from_user.id)

    await callback.answer()

    if keys is None:
        await failure_handler("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–ª—é—á–µ–π", callback)
        return
    
    if len(keys) == 0:
        await callback.message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π.", reply_markup=empty_keyboard)
        return
    
    for key in keys:

        formatted_date = key.active_until.strftime("%d.%m.%Y")

        message = (
            f'üîë *–¢–≤–æ–π –∫–ª—é—á (–Ω–∞–∂–º–∏ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è):*\n'
            f'`{key.sub_url}`\n\n'
            f'üïê *–ê–∫—Ç–∏–≤–µ–Ω –¥–æ:* `{formatted_date}`\n'
            f'üÜî *ID –∫–ª—é—á–∞:* `{key.id}`'
        )

        await callback.message.answer(text=message, parse_mode='Markdown')

    await callback.message.answer(text="–í—Å–µ –≤–∞—à–∏ –∫–ª—é—á–∏ –ø–æ–∫–∞–∑–∞–Ω—ã –≤—ã—à–µ.", reply_markup=empty_keyboard)

