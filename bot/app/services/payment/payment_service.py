# services/payment/payment_service.py

from typing import Optional

import httpx
from app.services.payment.client import client
from httpx import AsyncClient, HTTPStatusError
from app.models.payment.payment_request import AddPaymentRequest
from app.models.payment.payment_response import YooKassaPayment
from app.models.pyndantic import to_pydantic_model

entity_schema = "payment"

async def add_payment(request: AddPaymentRequest) -> Optional[YooKassaPayment]:
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –≤ payment-—Å–µ—Ä–≤–∏—Å.
    """
    try:
        response = await client.post(
            f"{entity_schema}/add_payment",
            json={
                "email": request.email,
                "description": request.description,
                "return_url": request.return_url,
                "amount": request.amount,
            }
        )
        response.raise_for_status()

        # –í–ê–ñ–ù–û: .json() ‚Äî —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥
        data = response.json()
        return to_pydantic_model(YooKassaPayment, data)

    except httpx.HTTPStatusError as e:
        print(f"HTTP –æ—à–∏–±–∫–∞: {e.response.status_code} ‚Äî {e.response.text}")
        return None

    except httpx.RequestError as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ —Å payment-—Å–µ—Ä–≤–∏—Å–æ–º: {str(e)}")
        return None

    except Exception as e:
        print(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã: {str(e)}")
        return None

    
async def check_payment(payment_id: str):
    """
    –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É.
    """
    try:
        response = await client.get(
            f"{entity_schema}/check_payment",
            params={"payment_id": payment_id}  # üëà –≤–æ—Ç —Ç–∞–∫ –ø–µ—Ä–µ–¥–∞—ë–º –¥–∞–Ω–Ω—ã–µ
        )

        response.raise_for_status()

        data = response.json()
        return data

    except HTTPStatusError as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç —Å–µ—Ä–≤–∏—Å–∞: {e.response.status_code} ‚Äî {e.response.text}")
        return None

    except Exception as e:
        print(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return None