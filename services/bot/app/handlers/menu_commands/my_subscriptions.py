from aiogram import Router, F
from app.states.subscription import SubscriptionState
from aiogram.types import CallbackQuery
from aiogram.fsm.context import FSMContext
from app.services.db import key_service
from app.helpers.failure_handler import failure_handler
from app.keyboards.inline import empty_keyboard
from logger import logger

router = Router()

@router.callback_query(F.data == "my_subscriptions", SubscriptionState.show_menu)
async def my_subscriptions(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    try:
        await callback.message.delete()
        await callback.answer()

        keys = await key_service.get_active_keys_for_tg_id(user_id)
        if keys is None:
            await failure_handler(callback)
            logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á–∏ (None).")
            return

        if len(keys) == 0:
            await callback.message.answer(
                "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π.",
                reply_markup=empty_keyboard
            )
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∏–º–µ–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª—é—á–µ–π.")
            return

        for key in keys:
            formatted_date = key.active_until.strftime("%d.%m.%Y")
            message = (
                f"üîë *–¢–≤–æ–π –∫–ª—é—á (–Ω–∞–∂–º–∏ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è):*\n"
                f"`{key.sub_url}`\n\n"
                f"üïê *–ê–∫—Ç–∏–≤–µ–Ω –¥–æ:* `{formatted_date}`\n"
                f"üÜî *ID –∫–ª—é—á–∞:* `{key.id}`"
            )
            await callback.message.answer(text=message, parse_mode="Markdown")
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –∫–ª—é—á {key.id}, –∞–∫—Ç–∏–≤–µ–Ω –¥–æ {formatted_date}.")

        await callback.message.answer(
            text="–í—Å–µ –≤–∞—à–∏ –∫–ª—é—á–∏ –ø–æ–∫–∞–∑–∞–Ω—ã –≤—ã—à–µ.",
            reply_markup=empty_keyboard
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –∫–ª—é—á–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}", exc_info=True)
        await callback.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤–∞—à–∏—Ö –∫–ª—é—á–µ–π.")
